// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  agents        Agent[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id           String       @id @default(cuid())
  name         String
  description  String
  type         AgentType
  status       AgentStatus  @default(ACTIVE)
  apiKey       String?
  endpoint     String?
  config       Json?
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  lastActiveAt DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sourceConnections AgentConnection[] @relation("SourceAgent")
  targetConnections AgentConnection[] @relation("TargetAgent")
}

model AgentConnection {
  id                String   @id @default(cuid())
  agentId           String
  connectedAgentId  String
  workflow          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  agent         Agent @relation("SourceAgent", fields: [agentId], references: [id], onDelete: Cascade)
  connectedAgent Agent @relation("TargetAgent", fields: [connectedAgentId], references: [id], onDelete: Cascade)
  
  @@unique([agentId, connectedAgentId])
}

enum AgentType {
  CHATGPT
  CLAUDE
  BARD
  CUSTOM
  ZAPIER
  MAKE
  N8N
}

enum AgentStatus {
  ACTIVE
  INACTIVE
  ERROR
  CONNECTING
}